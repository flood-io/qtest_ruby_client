=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class FieldResource
    # Number Data Type
    attr_accessor :instance_type

    attr_accessor :links

    # ID of the Field Setting
    attr_accessor :id

    # Label of the Field Setting
    attr_accessor :label

    # Is required or not
    attr_accessor :required

    # Constrained or not
    attr_accessor :constrained

    # Display order
    attr_accessor :order

    # Allowed values
    attr_accessor :allowed_values

    # Is allowed multiple value
    attr_accessor :multiple

    # Data type of the Field Setting
    attr_accessor :data_type

    # Allowed full text search or not
    attr_accessor :searchable

    # Default value of the Field Setting
    attr_accessor :default_value

    # Is system field or not
    attr_accessor :system_field

    # Original name of the Field Setting
    attr_accessor :original_name

    # Is active or disabled
    attr_accessor :is_active


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'instance_type' => :'instanceType',
        :'links' => :'links',
        :'id' => :'id',
        :'label' => :'label',
        :'required' => :'required',
        :'constrained' => :'constrained',
        :'order' => :'order',
        :'allowed_values' => :'allowed_values',
        :'multiple' => :'multiple',
        :'data_type' => :'data_type',
        :'searchable' => :'searchable',
        :'default_value' => :'default_value',
        :'system_field' => :'system_field',
        :'original_name' => :'original_name',
        :'is_active' => :'is_active'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'instance_type' => :'String',
        :'links' => :'Array<Link>',
        :'id' => :'Integer',
        :'label' => :'String',
        :'required' => :'BOOLEAN',
        :'constrained' => :'BOOLEAN',
        :'order' => :'Integer',
        :'allowed_values' => :'Array<AllowedValueResource>',
        :'multiple' => :'BOOLEAN',
        :'data_type' => :'Integer',
        :'searchable' => :'BOOLEAN',
        :'default_value' => :'String',
        :'system_field' => :'BOOLEAN',
        :'original_name' => :'String',
        :'is_active' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'instanceType')
        self.instance_type = attributes[:'instanceType']
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'required')
        self.required = attributes[:'required']
      else
        self.required = false
      end

      if attributes.has_key?(:'constrained')
        self.constrained = attributes[:'constrained']
      else
        self.constrained = false
      end

      if attributes.has_key?(:'order')
        self.order = attributes[:'order']
      end

      if attributes.has_key?(:'allowed_values')
        if (value = attributes[:'allowed_values']).is_a?(Array)
          self.allowed_values = value
        end
      end

      if attributes.has_key?(:'multiple')
        self.multiple = attributes[:'multiple']
      else
        self.multiple = false
      end

      if attributes.has_key?(:'data_type')
        self.data_type = attributes[:'data_type']
      end

      if attributes.has_key?(:'searchable')
        self.searchable = attributes[:'searchable']
      else
        self.searchable = false
      end

      if attributes.has_key?(:'default_value')
        self.default_value = attributes[:'default_value']
      end

      if attributes.has_key?(:'system_field')
        self.system_field = attributes[:'system_field']
      else
        self.system_field = false
      end

      if attributes.has_key?(:'original_name')
        self.original_name = attributes[:'original_name']
      end

      if attributes.has_key?(:'is_active')
        self.is_active = attributes[:'is_active']
      else
        self.is_active = false
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @label.nil?
        invalid_properties.push("invalid value for 'label', label cannot be nil.")
      end

      if !@data_type.nil? && @data_type < 1
        invalid_properties.push("invalid value for 'data_type', must be greater than or equal to 1.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @label.nil?
      return false if !@data_type.nil? && @data_type < 1
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] data_type Value to be assigned
    def data_type=(data_type)

      if !data_type.nil? && data_type < 1
        fail ArgumentError, "invalid value for 'data_type', must be greater than or equal to 1."
      end

      @data_type = data_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          instance_type == o.instance_type &&
          links == o.links &&
          id == o.id &&
          label == o.label &&
          required == o.required &&
          constrained == o.constrained &&
          order == o.order &&
          allowed_values == o.allowed_values &&
          multiple == o.multiple &&
          data_type == o.data_type &&
          searchable == o.searchable &&
          default_value == o.default_value &&
          system_field == o.system_field &&
          original_name == o.original_name &&
          is_active == o.is_active
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [instance_type, links, id, label, required, constrained, order, allowed_values, multiple, data_type, searchable, default_value, system_field, original_name, is_active].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
