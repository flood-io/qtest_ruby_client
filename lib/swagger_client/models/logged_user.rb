=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class LoggedUser
    attr_accessor :links

    # ID of the User
    attr_accessor :id

    # Login email of the User
    attr_accessor :user_name

    # First name
    attr_accessor :first_name

    # Last name
    attr_accessor :last_name

    # ID of qTest site that User logged in
    attr_accessor :client_id

    # qTest instance client site name
    attr_accessor :client_name

    # URL of qTest instance
    attr_accessor :client_site

    # Timezone setting of User
    attr_accessor :timezone_offset

    # URL to User's Avatar
    attr_accessor :avatar

    # Can access admin page or not
    attr_accessor :access_admin_page

    # qTest instance sub domain name
    attr_accessor :client_site_name

    # Package type
    attr_accessor :package_type

    # List qTest products which User can access
    attr_accessor :applications

    # Arrays of Supports link
    attr_accessor :support_links


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'links' => :'links',
        :'id' => :'id',
        :'user_name' => :'user_name',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'client_id' => :'client_id',
        :'client_name' => :'client_name',
        :'client_site' => :'client_site',
        :'timezone_offset' => :'timezone_offset',
        :'avatar' => :'avatar',
        :'access_admin_page' => :'access_admin_page',
        :'client_site_name' => :'client_site_name',
        :'package_type' => :'package_type',
        :'applications' => :'applications',
        :'support_links' => :'support_links'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'links' => :'Array<Link>',
        :'id' => :'Integer',
        :'user_name' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'client_id' => :'Integer',
        :'client_name' => :'String',
        :'client_site' => :'String',
        :'timezone_offset' => :'String',
        :'avatar' => :'String',
        :'access_admin_page' => :'BOOLEAN',
        :'client_site_name' => :'String',
        :'package_type' => :'String',
        :'applications' => :'Array<AppDetail>',
        :'support_links' => :'Hash<String, String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end

      if attributes.has_key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.has_key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.has_key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.has_key?(:'client_name')
        self.client_name = attributes[:'client_name']
      end

      if attributes.has_key?(:'client_site')
        self.client_site = attributes[:'client_site']
      end

      if attributes.has_key?(:'timezone_offset')
        self.timezone_offset = attributes[:'timezone_offset']
      end

      if attributes.has_key?(:'avatar')
        self.avatar = attributes[:'avatar']
      end

      if attributes.has_key?(:'access_admin_page')
        self.access_admin_page = attributes[:'access_admin_page']
      else
        self.access_admin_page = false
      end

      if attributes.has_key?(:'client_site_name')
        self.client_site_name = attributes[:'client_site_name']
      end

      if attributes.has_key?(:'package_type')
        self.package_type = attributes[:'package_type']
      end

      if attributes.has_key?(:'applications')
        if (value = attributes[:'applications']).is_a?(Array)
          self.applications = value
        end
      end

      if attributes.has_key?(:'support_links')
        if (value = attributes[:'support_links']).is_a?(Array)
          self.support_links = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          links == o.links &&
          id == o.id &&
          user_name == o.user_name &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          client_id == o.client_id &&
          client_name == o.client_name &&
          client_site == o.client_site &&
          timezone_offset == o.timezone_offset &&
          avatar == o.avatar &&
          access_admin_page == o.access_admin_page &&
          client_site_name == o.client_site_name &&
          package_type == o.package_type &&
          applications == o.applications &&
          support_links == o.support_links
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [links, id, user_name, first_name, last_name, client_id, client_name, client_site, timezone_offset, avatar, access_admin_page, client_site_name, package_type, applications, support_links].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
