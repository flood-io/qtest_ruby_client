=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class AdminProfile
    # ID of the user
    attr_accessor :user_id

    # Has permission on create Project
    attr_accessor :create_project

    # Has permission on edit Project
    attr_accessor :edit_project

    # Has permission on archive Project
    attr_accessor :archive_project

    # Has permission on view Project
    attr_accessor :list_project

    # Has permission on Invite/Edit Users
    attr_accessor :manage_client_user

    # Has permission on edit Profiles
    attr_accessor :edit_user_profile

    # Has permission on view Profiles
    attr_accessor :view_user_profile

    # Has permission on update Company's information
    attr_accessor :manage_client_info

    # Has permission on manage System configuration
    attr_accessor :manage_system_conf

    # Has permission on manage site level field setting
    attr_accessor :site_level_field


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_id' => :'user_id',
        :'create_project' => :'create_project',
        :'edit_project' => :'edit_project',
        :'archive_project' => :'archive_project',
        :'list_project' => :'list_project',
        :'manage_client_user' => :'manage_client_user',
        :'edit_user_profile' => :'edit_user_profile',
        :'view_user_profile' => :'view_user_profile',
        :'manage_client_info' => :'manage_client_info',
        :'manage_system_conf' => :'manage_system_conf',
        :'site_level_field' => :'site_level_field'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'user_id' => :'Integer',
        :'create_project' => :'BOOLEAN',
        :'edit_project' => :'BOOLEAN',
        :'archive_project' => :'BOOLEAN',
        :'list_project' => :'BOOLEAN',
        :'manage_client_user' => :'BOOLEAN',
        :'edit_user_profile' => :'BOOLEAN',
        :'view_user_profile' => :'BOOLEAN',
        :'manage_client_info' => :'BOOLEAN',
        :'manage_system_conf' => :'BOOLEAN',
        :'site_level_field' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.has_key?(:'create_project')
        self.create_project = attributes[:'create_project']
      else
        self.create_project = false
      end

      if attributes.has_key?(:'edit_project')
        self.edit_project = attributes[:'edit_project']
      else
        self.edit_project = false
      end

      if attributes.has_key?(:'archive_project')
        self.archive_project = attributes[:'archive_project']
      else
        self.archive_project = false
      end

      if attributes.has_key?(:'list_project')
        self.list_project = attributes[:'list_project']
      else
        self.list_project = false
      end

      if attributes.has_key?(:'manage_client_user')
        self.manage_client_user = attributes[:'manage_client_user']
      else
        self.manage_client_user = false
      end

      if attributes.has_key?(:'edit_user_profile')
        self.edit_user_profile = attributes[:'edit_user_profile']
      else
        self.edit_user_profile = false
      end

      if attributes.has_key?(:'view_user_profile')
        self.view_user_profile = attributes[:'view_user_profile']
      else
        self.view_user_profile = false
      end

      if attributes.has_key?(:'manage_client_info')
        self.manage_client_info = attributes[:'manage_client_info']
      else
        self.manage_client_info = false
      end

      if attributes.has_key?(:'manage_system_conf')
        self.manage_system_conf = attributes[:'manage_system_conf']
      else
        self.manage_system_conf = false
      end

      if attributes.has_key?(:'site_level_field')
        self.site_level_field = attributes[:'site_level_field']
      else
        self.site_level_field = false
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_id == o.user_id &&
          create_project == o.create_project &&
          edit_project == o.edit_project &&
          archive_project == o.archive_project &&
          list_project == o.list_project &&
          manage_client_user == o.manage_client_user &&
          edit_user_profile == o.edit_user_profile &&
          view_user_profile == o.view_user_profile &&
          manage_client_info == o.manage_client_info &&
          manage_system_conf == o.manage_system_conf &&
          site_level_field == o.site_level_field
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [user_id, create_project, edit_project, archive_project, list_project, manage_client_user, edit_user_profile, view_user_profile, manage_client_info, manage_system_conf, site_level_field].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
