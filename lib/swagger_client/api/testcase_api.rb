=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class TestcaseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Adds a Comment to a Test Case
    # To add a Comment to a Test Case  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Case
    # @param body The comment&#39;s properties and its content
    # @param [Hash] opts the optional parameters
    # @return [CommentResource]
    def add_comment(project_id, id_or_key, body, opts = {})
      data, _status_code, _headers = add_comment_with_http_info(project_id, id_or_key, body, opts)
      return data
    end

    # Adds a Comment to a Test Case
    # To add a Comment to a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Case
    # @param body The comment&#39;s properties and its content
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommentResource, Fixnum, Hash)>] CommentResource data, response status code and response headers
    def add_comment_with_http_info(project_id, id_or_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.add_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.add_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling TestcaseApi.add_comment" if id_or_key.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestcaseApi.add_comment" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#add_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Test Step
    # To add a Test Step to a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param body Given resource to add a test step.
    # @param [Hash] opts the optional parameters
    # @return [TestStepResource]
    def add_test_step(project_id, test_case_id, body, opts = {})
      data, _status_code, _headers = add_test_step_with_http_info(project_id, test_case_id, body, opts)
      return data
    end

    # Creates a Test Step
    # To add a Test Step to a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param body Given resource to add a test step.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TestStepResource, Fixnum, Hash)>] TestStepResource data, response status code and response headers
    def add_test_step_with_http_info(project_id, test_case_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.add_test_step ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.add_test_step" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.add_test_step" if test_case_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestcaseApi.add_test_step" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestStepResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#add_test_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Approves a Test Case
    # To approve a Test Case  <strong>qTest Manager version:</strong> 7.4+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param [Hash] opts the optional parameters
    # @return [TestCaseWithCustomFieldResource]
    def approve_test_case(project_id, test_case_id, opts = {})
      data, _status_code, _headers = approve_test_case_with_http_info(project_id, test_case_id, opts)
      return data
    end

    # Approves a Test Case
    # To approve a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.4+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param [Hash] opts the optional parameters
    # @return [Array<(TestCaseWithCustomFieldResource, Fixnum, Hash)>] TestCaseWithCustomFieldResource data, response status code and response headers
    def approve_test_case_with_http_info(project_id, test_case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.approve_test_case ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.approve_test_case" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.approve_test_case" if test_case_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/approve".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestCaseWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#approve_test_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Test Case
    # To create a Test Case  <strong>qTest Manager version:</strong> 4+
    # @param project_id ID of the project
    # @param body Test Case properties, Test Steps, Attachments and other information to create a Test Case.  If &lt;em&gt;parent_id&lt;/em&gt; is omitted, the Test Case will be created under \&quot;Created via API\&quot; Module
    # @param [Hash] opts the optional parameters
    # @option opts [String] :agent_id 
    # @return [TestCaseWithCustomFieldResource]
    def create_test_case(project_id, body, opts = {})
      data, _status_code, _headers = create_test_case_with_http_info(project_id, body, opts)
      return data
    end

    # Creates a Test Case
    # To create a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param project_id ID of the project
    # @param body Test Case properties, Test Steps, Attachments and other information to create a Test Case.  If &lt;em&gt;parent_id&lt;/em&gt; is omitted, the Test Case will be created under \&quot;Created via API\&quot; Module
    # @param [Hash] opts the optional parameters
    # @option opts [String] :agent_id 
    # @return [Array<(TestCaseWithCustomFieldResource, Fixnum, Hash)>] TestCaseWithCustomFieldResource data, response status code and response headers
    def create_test_case_with_http_info(project_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.create_test_case ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.create_test_case" if project_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestcaseApi.create_test_case" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'agentId'] = opts[:'agent_id'] if !opts[:'agent_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestCaseWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#create_test_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Comment of a Test Case
    # To delete a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Case
    # @param comment_id ID of the comment.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_comment(project_id, id_or_key, comment_id, opts = {})
      data, _status_code, _headers = delete_comment_with_http_info(project_id, id_or_key, comment_id, opts)
      return data
    end

    # Deletes a Comment of a Test Case
    # To delete a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Case
    # @param comment_id ID of the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def delete_comment_with_http_info(project_id, id_or_key, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.delete_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.delete_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling TestcaseApi.delete_comment" if id_or_key.nil?
      # verify the required parameter 'comment_id' is set
      fail ArgumentError, "Missing the required parameter 'comment_id' when calling TestcaseApi.delete_comment" if comment_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#delete_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Test Case
    # To delete Test Case  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case which needs to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_test_case(project_id, test_case_id, opts = {})
      delete_test_case_with_http_info(project_id, test_case_id, opts)
      return nil
    end

    # Deletes a Test Case
    # To delete Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case which needs to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_test_case_with_http_info(project_id, test_case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.delete_test_case ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.delete_test_case" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.delete_test_case" if test_case_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#delete_test_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Test Step
    # To delete a test step of a Test Case  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param step_id ID of the Test Step
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :update_version If you specify updateVersion&#x3D;true, the test case version will be updated when the test step deleted.
    # @return [Object]
    def delete_test_step(project_id, test_case_id, step_id, opts = {})
      data, _status_code, _headers = delete_test_step_with_http_info(project_id, test_case_id, step_id, opts)
      return data
    end

    # Deletes a Test Step
    # To delete a test step of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param step_id ID of the Test Step
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :update_version If you specify updateVersion&#x3D;true, the test case version will be updated when the test step deleted.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def delete_test_step_with_http_info(project_id, test_case_id, step_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.delete_test_step ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.delete_test_step" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.delete_test_step" if test_case_id.nil?
      # verify the required parameter 'step_id' is set
      fail ArgumentError, "Missing the required parameter 'step_id' when calling TestcaseApi.delete_test_step" if step_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s).sub('{' + 'stepId' + '}', step_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'updateVersion'] = opts[:'update_version'] if !opts[:'update_version'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#delete_test_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Comment of a Test Case
    # To retrieve a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Case
    # @param comment_id ID of the comment.
    # @param [Hash] opts the optional parameters
    # @return [CommentResource]
    def get_comment(project_id, id_or_key, comment_id, opts = {})
      data, _status_code, _headers = get_comment_with_http_info(project_id, id_or_key, comment_id, opts)
      return data
    end

    # Gets a Comment of a Test Case
    # To retrieve a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Case
    # @param comment_id ID of the comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommentResource, Fixnum, Hash)>] CommentResource data, response status code and response headers
    def get_comment_with_http_info(project_id, id_or_key, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.get_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.get_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling TestcaseApi.get_comment" if id_or_key.nil?
      # verify the required parameter 'comment_id' is set
      fail ArgumentError, "Missing the required parameter 'comment_id' when calling TestcaseApi.get_comment" if comment_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#get_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all Comments of a Test Case
    # To retrieve all comments of a Test Case  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Case whose comments you want to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page By default the first page is returned but you can specify any page number to retrieve objects (default to 1)
    # @option opts [Integer] :page_size The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (default to 100)
    # @return [PagedResourceCommentResource]
    def get_comments(project_id, id_or_key, opts = {})
      data, _status_code, _headers = get_comments_with_http_info(project_id, id_or_key, opts)
      return data
    end

    # Gets all Comments of a Test Case
    # To retrieve all comments of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Case whose comments you want to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page By default the first page is returned but you can specify any page number to retrieve objects
    # @option opts [Integer] :page_size The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
    # @return [Array<(PagedResourceCommentResource, Fixnum, Hash)>] PagedResourceCommentResource data, response status code and response headers
    def get_comments_with_http_info(project_id, id_or_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.get_comments ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.get_comments" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling TestcaseApi.get_comments" if id_or_key.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagedResourceCommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#get_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Test Case
    # To retrieve a Test Case  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :version_id ID of the Test Case version
    # @option opts [String] :expand By default, Test Steps are excluded from the response. Specify &lt;em&gt;expand&#x3D;teststep&lt;/em&gt; to include Test Steps
    # @return [TestCaseWithCustomFieldResource]
    def get_test_case(project_id, test_case_id, opts = {})
      data, _status_code, _headers = get_test_case_with_http_info(project_id, test_case_id, opts)
      return data
    end

    # Gets a Test Case
    # To retrieve a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :version_id ID of the Test Case version
    # @option opts [String] :expand By default, Test Steps are excluded from the response. Specify &lt;em&gt;expand&#x3D;teststep&lt;/em&gt; to include Test Steps
    # @return [Array<(TestCaseWithCustomFieldResource, Fixnum, Hash)>] TestCaseWithCustomFieldResource data, response status code and response headers
    def get_test_case_with_http_info(project_id, test_case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.get_test_case ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.get_test_case" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.get_test_case" if test_case_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestCaseWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#get_test_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a version of a Test Case
    # To retrieve a specific version of a Test Case  <strong>qTest Manager version:</strong> 4+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param version_id ID of the Test Case version
    # @param [Hash] opts the optional parameters
    # @return [TestCaseWithCustomFieldResource]
    def get_test_case_0(project_id, test_case_id, version_id, opts = {})
      data, _status_code, _headers = get_test_case_0_with_http_info(project_id, test_case_id, version_id, opts)
      return data
    end

    # Gets a version of a Test Case
    # To retrieve a specific version of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param version_id ID of the Test Case version
    # @param [Hash] opts the optional parameters
    # @return [Array<(TestCaseWithCustomFieldResource, Fixnum, Hash)>] TestCaseWithCustomFieldResource data, response status code and response headers
    def get_test_case_0_with_http_info(project_id, test_case_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.get_test_case_0 ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.get_test_case_0" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.get_test_case_0" if test_case_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling TestcaseApi.get_test_case_0" if version_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions/{versionId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestCaseWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#get_test_case_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets multiple Test Cases
    # To retrieve all Test Cases or Test Cases which are located directly under a Module
    # @param project_id ID of the project
    # @param page By default the first page is returned. However, you can specify any page number to retrieve test cases.
    # @param size The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id Module ID
    # @option opts [BOOLEAN] :expand_props By default, Test Case properties are included in the response. specify &lt;em&gt;expandProps&#x3D;false&lt;/em&gt; to exclude them
    # @option opts [BOOLEAN] :expand_steps By default, Test Steps are excluded from the response body. Input &lt;em&gt;expandSteps&#x3D;true&lt;/em&gt; to include Test Steps
    # @return [Array<TestCaseWithCustomFieldResource>]
    def get_test_cases(project_id, page, size, opts = {})
      data, _status_code, _headers = get_test_cases_with_http_info(project_id, page, size, opts)
      return data
    end

    # Gets multiple Test Cases
    # To retrieve all Test Cases or Test Cases which are located directly under a Module
    # @param project_id ID of the project
    # @param page By default the first page is returned. However, you can specify any page number to retrieve test cases.
    # @param size The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id Module ID
    # @option opts [BOOLEAN] :expand_props By default, Test Case properties are included in the response. specify &lt;em&gt;expandProps&#x3D;false&lt;/em&gt; to exclude them
    # @option opts [BOOLEAN] :expand_steps By default, Test Steps are excluded from the response body. Input &lt;em&gt;expandSteps&#x3D;true&lt;/em&gt; to include Test Steps
    # @return [Array<(Array<TestCaseWithCustomFieldResource>, Fixnum, Hash)>] Array<TestCaseWithCustomFieldResource> data, response status code and response headers
    def get_test_cases_with_http_info(project_id, page, size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.get_test_cases ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.get_test_cases" if project_id.nil?
      # verify the required parameter 'page' is set
      fail ArgumentError, "Missing the required parameter 'page' when calling TestcaseApi.get_test_cases" if page.nil?
      # verify the required parameter 'size' is set
      fail ArgumentError, "Missing the required parameter 'size' when calling TestcaseApi.get_test_cases" if size.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = page
      query_params[:'size'] = size
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'expandProps'] = opts[:'expand_props'] if !opts[:'expand_props'].nil?
      query_params[:'expandSteps'] = opts[:'expand_steps'] if !opts[:'expand_steps'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TestCaseWithCustomFieldResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#get_test_cases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Test Step
    # To retrieve a Test Step of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param step_id ID of the test step.
    # @param [Hash] opts the optional parameters
    # @return [TestStepResource]
    def get_test_step(project_id, test_case_id, step_id, opts = {})
      data, _status_code, _headers = get_test_step_with_http_info(project_id, test_case_id, step_id, opts)
      return data
    end

    # Gets a Test Step
    # To retrieve a Test Step of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param step_id ID of the test step.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TestStepResource, Fixnum, Hash)>] TestStepResource data, response status code and response headers
    def get_test_step_with_http_info(project_id, test_case_id, step_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.get_test_step ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.get_test_step" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.get_test_step" if test_case_id.nil?
      # verify the required parameter 'step_id' is set
      fail ArgumentError, "Missing the required parameter 'step_id' when calling TestcaseApi.get_test_step" if step_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s).sub('{' + 'stepId' + '}', step_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestStepResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#get_test_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets Test Steps of a Test Case
    # To retrieve all Test Steps of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param [Hash] opts the optional parameters
    # @return [Array<TestStepResource>]
    def get_test_steps(project_id, test_case_id, opts = {})
      data, _status_code, _headers = get_test_steps_with_http_info(project_id, test_case_id, opts)
      return data
    end

    # Gets Test Steps of a Test Case
    # To retrieve all Test Steps of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TestStepResource>, Fixnum, Hash)>] Array<TestStepResource> data, response status code and response headers
    def get_test_steps_with_http_info(project_id, test_case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.get_test_steps ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.get_test_steps" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.get_test_steps" if test_case_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TestStepResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#get_test_steps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets Test Steps of a Test Case version
    # To retrieve all Test Steps of a specific Test Case version
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param version_id ID of the Test Case version
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify &lt;em&gt;expand&#x3D;calledteststep&lt;/em&gt; to include Test Steps of the called Test Cases
    # @return [Array<TestStepResource>]
    def get_test_steps_by_version(project_id, test_case_id, version_id, opts = {})
      data, _status_code, _headers = get_test_steps_by_version_with_http_info(project_id, test_case_id, version_id, opts)
      return data
    end

    # Gets Test Steps of a Test Case version
    # To retrieve all Test Steps of a specific Test Case version
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param version_id ID of the Test Case version
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify &lt;em&gt;expand&#x3D;calledteststep&lt;/em&gt; to include Test Steps of the called Test Cases
    # @return [Array<(Array<TestStepResource>, Fixnum, Hash)>] Array<TestStepResource> data, response status code and response headers
    def get_test_steps_by_version_with_http_info(project_id, test_case_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.get_test_steps_by_version ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.get_test_steps_by_version" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.get_test_steps_by_version" if test_case_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling TestcaseApi.get_test_steps_by_version" if version_id.nil?
      if opts[:'expand'] && !['calledteststep'].include?(opts[:'expand'])
        fail ArgumentError, 'invalid value for "expand", must be one of calledteststep'
      end
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions/{versionId}/test-steps".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TestStepResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#get_test_steps_by_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all versions of a Test Case
    # To retrieve all versions of a Test Case  <strong>qTest Manager version:</strong> 7.4+
    # @param project_id ID of the project
    # @param test_case_id ID of the test case
    # @param [Hash] opts the optional parameters
    # @return [Array<TestCaseWithCustomFieldResource>]
    def get_versions(project_id, test_case_id, opts = {})
      data, _status_code, _headers = get_versions_with_http_info(project_id, test_case_id, opts)
      return data
    end

    # Gets all versions of a Test Case
    # To retrieve all versions of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.4+
    # @param project_id ID of the project
    # @param test_case_id ID of the test case
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TestCaseWithCustomFieldResource>, Fixnum, Hash)>] Array<TestCaseWithCustomFieldResource> data, response status code and response headers
    def get_versions_with_http_info(project_id, test_case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.get_versions ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.get_versions" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.get_versions" if test_case_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TestCaseWithCustomFieldResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#get_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Comment of a Test Case
    # To modify a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Case
    # @param comment_id ID of the comment.
    # @param body The comment&#39;s updated content
    # @param [Hash] opts the optional parameters
    # @return [CommentResource]
    def update_comment(project_id, id_or_key, comment_id, body, opts = {})
      data, _status_code, _headers = update_comment_with_http_info(project_id, id_or_key, comment_id, body, opts)
      return data
    end

    # Updates a Comment of a Test Case
    # To modify a comment of a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Case
    # @param comment_id ID of the comment.
    # @param body The comment&#39;s updated content
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommentResource, Fixnum, Hash)>] CommentResource data, response status code and response headers
    def update_comment_with_http_info(project_id, id_or_key, comment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.update_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.update_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling TestcaseApi.update_comment" if id_or_key.nil?
      # verify the required parameter 'comment_id' is set
      fail ArgumentError, "Missing the required parameter 'comment_id' when calling TestcaseApi.update_comment" if comment_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestcaseApi.update_comment" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#update_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Test Case
    # To update a Test Case  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case which needs to be updated.
    # @param body Test Case properties, Test Steps and other information to update the Test Case
    # @param [Hash] opts the optional parameters
    # @return [TestCaseWithCustomFieldResource]
    def update_test_case(project_id, test_case_id, body, opts = {})
      data, _status_code, _headers = update_test_case_with_http_info(project_id, test_case_id, body, opts)
      return data
    end

    # Updates a Test Case
    # To update a Test Case  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case which needs to be updated.
    # @param body Test Case properties, Test Steps and other information to update the Test Case
    # @param [Hash] opts the optional parameters
    # @return [Array<(TestCaseWithCustomFieldResource, Fixnum, Hash)>] TestCaseWithCustomFieldResource data, response status code and response headers
    def update_test_case_with_http_info(project_id, test_case_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.update_test_case ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.update_test_case" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.update_test_case" if test_case_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestcaseApi.update_test_case" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestCaseWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#update_test_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Test Step
    # To update a Test Step of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param step_id ID of the Test Step
    # @param body Updated content of the Test Step
    # @param [Hash] opts the optional parameters
    # @return [TestStepResource]
    def update_test_step(project_id, test_case_id, step_id, body, opts = {})
      data, _status_code, _headers = update_test_step_with_http_info(project_id, test_case_id, step_id, body, opts)
      return data
    end

    # Update a Test Step
    # To update a Test Step of a Test Case&#39;s latest version  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_case_id ID of the Test Case
    # @param step_id ID of the Test Step
    # @param body Updated content of the Test Step
    # @param [Hash] opts the optional parameters
    # @return [Array<(TestStepResource, Fixnum, Hash)>] TestStepResource data, response status code and response headers
    def update_test_step_with_http_info(project_id, test_case_id, step_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestcaseApi.update_test_step ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestcaseApi.update_test_step" if project_id.nil?
      # verify the required parameter 'test_case_id' is set
      fail ArgumentError, "Missing the required parameter 'test_case_id' when calling TestcaseApi.update_test_step" if test_case_id.nil?
      # verify the required parameter 'step_id' is set
      fail ArgumentError, "Missing the required parameter 'step_id' when calling TestcaseApi.update_test_step" if step_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestcaseApi.update_test_step" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testCaseId' + '}', test_case_id.to_s).sub('{' + 'stepId' + '}', step_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestStepResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestcaseApi#update_test_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
