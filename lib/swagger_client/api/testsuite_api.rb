=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class TestsuiteApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a Test Suite
    # To create a new Test Suite  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param body The Test Suite&#39;s properties
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the Release or Test Cycle under which the newly created Test Suites are located. Input 0 (zero) to create Test Suites directly under root
    # @option opts [String] :parent_type Arifact type of the container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt;
    # @return [TestSuiteWithCustomFieldResource]
    def create_test_suite(project_id, body, opts = {})
      data, _status_code, _headers = create_test_suite_with_http_info(project_id, body, opts)
      return data
    end

    # Creates a Test Suite
    # To create a new Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param body The Test Suite&#39;s properties
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the Release or Test Cycle under which the newly created Test Suites are located. Input 0 (zero) to create Test Suites directly under root
    # @option opts [String] :parent_type Arifact type of the container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt;
    # @return [Array<(TestSuiteWithCustomFieldResource, Fixnum, Hash)>] TestSuiteWithCustomFieldResource data, response status code and response headers
    def create_test_suite_with_http_info(project_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestsuiteApi.create_test_suite ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestsuiteApi.create_test_suite" if project_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestsuiteApi.create_test_suite" if body.nil?
      if opts[:'parent_type'] && !['root', 'release', 'test-cycle'].include?(opts[:'parent_type'])
        fail ArgumentError, 'invalid value for "parent_type", must be one of root, release, test-cycle'
      end
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-suites".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'parentType'] = opts[:'parent_type'] if !opts[:'parent_type'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestSuiteWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestsuiteApi#create_test_suite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Test Suite
    # To delete a Test Suite  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_suite_id ID of the Test Suite.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete(project_id, test_suite_id, opts = {})
      data, _status_code, _headers = delete_with_http_info(project_id, test_suite_id, opts)
      return data
    end

    # Deletes a Test Suite
    # To delete a Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_suite_id ID of the Test Suite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def delete_with_http_info(project_id, test_suite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestsuiteApi.delete ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestsuiteApi.delete" if project_id.nil?
      # verify the required parameter 'test_suite_id' is set
      fail ArgumentError, "Missing the required parameter 'test_suite_id' when calling TestsuiteApi.delete" if test_suite_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-suites/{testSuiteId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testSuiteId' + '}', test_suite_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestsuiteApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets multiple Test Suite
    # To retrieve Test Suites which located under a parent Release, Test Cycle or root  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the Release or Test Cycle under which the Test Suites are located. Input 0 (zero) to get Test Suites directly under root
    # @option opts [String] :parent_type Arifact type of the container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt;
    # @return [Array<TestSuiteWithCustomFieldResource>]
    def get(project_id, opts = {})
      data, _status_code, _headers = get_with_http_info(project_id, opts)
      return data
    end

    # Gets multiple Test Suite
    # To retrieve Test Suites which located under a parent Release, Test Cycle or root  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the Release or Test Cycle under which the Test Suites are located. Input 0 (zero) to get Test Suites directly under root
    # @option opts [String] :parent_type Arifact type of the container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt;
    # @return [Array<(Array<TestSuiteWithCustomFieldResource>, Fixnum, Hash)>] Array<TestSuiteWithCustomFieldResource> data, response status code and response headers
    def get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestsuiteApi.get ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestsuiteApi.get" if project_id.nil?
      if opts[:'parent_type'] && !['root', 'release', 'test-cycle'].include?(opts[:'parent_type'])
        fail ArgumentError, 'invalid value for "parent_type", must be one of root, release, test-cycle'
      end
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-suites".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'parentType'] = opts[:'parent_type'] if !opts[:'parent_type'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TestSuiteWithCustomFieldResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestsuiteApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Test Suite
    # To retrieve a Test Suite  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_suite_id ID of the Test Suite
    # @param [Hash] opts the optional parameters
    # @return [TestSuiteWithCustomFieldResource]
    def get_test_suite(project_id, test_suite_id, opts = {})
      data, _status_code, _headers = get_test_suite_with_http_info(project_id, test_suite_id, opts)
      return data
    end

    # Gets a Test Suite
    # To retrieve a Test Suite  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_suite_id ID of the Test Suite
    # @param [Hash] opts the optional parameters
    # @return [Array<(TestSuiteWithCustomFieldResource, Fixnum, Hash)>] TestSuiteWithCustomFieldResource data, response status code and response headers
    def get_test_suite_with_http_info(project_id, test_suite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestsuiteApi.get_test_suite ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestsuiteApi.get_test_suite" if project_id.nil?
      # verify the required parameter 'test_suite_id' is set
      fail ArgumentError, "Missing the required parameter 'test_suite_id' when calling TestsuiteApi.get_test_suite" if test_suite_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-suites/{testSuiteId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testSuiteId' + '}', test_suite_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestSuiteWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestsuiteApi#get_test_suite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Test Suite
    # To update an existing Test Suite or to move it to other container  <strong>Important:</strong> If you use the request parameters <em>parentId</em> and <em>parentType</em>, the request body will be ignore.   That means the Test Suite is being moved but it will not be updated with the properties specify in the request body
    # @param project_id ID of the project
    # @param test_suite_id ID of the Test Suite
    # @param body The Test Suite&#39;s updated properties
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the Release or Test Cycle which the Test Suite will be moved to. Input 0 (zero) to move the Test Suite to under root
    # @option opts [String] :parent_type Artifact type of the parent container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt;
    # @option opts [BOOLEAN] :no_email 
    # @return [TestSuiteWithCustomFieldResource]
    def update_test_suite(project_id, test_suite_id, body, opts = {})
      data, _status_code, _headers = update_test_suite_with_http_info(project_id, test_suite_id, body, opts)
      return data
    end

    # Updates a Test Suite
    # To update an existing Test Suite or to move it to other container  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters &lt;em&gt;parentId&lt;/em&gt; and &lt;em&gt;parentType&lt;/em&gt;, the request body will be ignore.   That means the Test Suite is being moved but it will not be updated with the properties specify in the request body
    # @param project_id ID of the project
    # @param test_suite_id ID of the Test Suite
    # @param body The Test Suite&#39;s updated properties
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the Release or Test Cycle which the Test Suite will be moved to. Input 0 (zero) to move the Test Suite to under root
    # @option opts [String] :parent_type Artifact type of the parent container. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt;
    # @option opts [BOOLEAN] :no_email 
    # @return [Array<(TestSuiteWithCustomFieldResource, Fixnum, Hash)>] TestSuiteWithCustomFieldResource data, response status code and response headers
    def update_test_suite_with_http_info(project_id, test_suite_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestsuiteApi.update_test_suite ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestsuiteApi.update_test_suite" if project_id.nil?
      # verify the required parameter 'test_suite_id' is set
      fail ArgumentError, "Missing the required parameter 'test_suite_id' when calling TestsuiteApi.update_test_suite" if test_suite_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestsuiteApi.update_test_suite" if body.nil?
      if opts[:'parent_type'] && !['root', 'release', 'test-cycle'].include?(opts[:'parent_type'])
        fail ArgumentError, 'invalid value for "parent_type", must be one of root, release, test-cycle'
      end
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-suites/{testSuiteId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testSuiteId' + '}', test_suite_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'parentType'] = opts[:'parent_type'] if !opts[:'parent_type'].nil?
      query_params[:'noEmail'] = opts[:'no_email'] if !opts[:'no_email'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestSuiteWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestsuiteApi#update_test_suite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
