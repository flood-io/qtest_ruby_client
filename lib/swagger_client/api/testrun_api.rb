=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class TestrunApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Adds a Comment to a Test Run
    # To add a Comment to a Test Run  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key The PID or ID of the Test Run.
    # @param body The Comment&#39;s content
    # @param [Hash] opts the optional parameters
    # @return [CommentResource]
    def add_comment(project_id, id_or_key, body, opts = {})
      data, _status_code, _headers = add_comment_with_http_info(project_id, id_or_key, body, opts)
      return data
    end

    # Adds a Comment to a Test Run
    # To add a Comment to a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key The PID or ID of the Test Run.
    # @param body The Comment&#39;s content
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommentResource, Fixnum, Hash)>] CommentResource data, response status code and response headers
    def add_comment_with_http_info(project_id, id_or_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.add_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.add_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling TestrunApi.add_comment" if id_or_key.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestrunApi.add_comment" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#add_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Test Run
    # To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  <strong>qTest Manager version:</strong> 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body
    # @param project_id ID of the project
    # @param body The Test Run&#39;s properties and its associated Test Case
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the container  Input 0 (zero) to get Test Runs directly under root
    # @option opts [String] :parent_type Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt;
    # @return [TestRunWithCustomFieldResource]
    def create(project_id, body, opts = {})
      data, _status_code, _headers = create_with_http_info(project_id, body, opts)
      return data
    end

    # Creates a Test Run
    # To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body
    # @param project_id ID of the project
    # @param body The Test Run&#39;s properties and its associated Test Case
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the container  Input 0 (zero) to get Test Runs directly under root
    # @option opts [String] :parent_type Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt;
    # @return [Array<(TestRunWithCustomFieldResource, Fixnum, Hash)>] TestRunWithCustomFieldResource data, response status code and response headers
    def create_with_http_info(project_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.create ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.create" if project_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestrunApi.create" if body.nil?
      if opts[:'parent_type'] && !['root', 'release', 'test-cycle', 'test-suite'].include?(opts[:'parent_type'])
        fail ArgumentError, 'invalid value for "parent_type", must be one of root, release, test-cycle, test-suite'
      end
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'parentType'] = opts[:'parent_type'] if !opts[:'parent_type'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestRunWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Test Run
    # To delete a Test Run  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_run_id ID of the Test Run
    # @param [Hash] opts the optional parameters
    # @return [Message]
    def delete(project_id, test_run_id, opts = {})
      data, _status_code, _headers = delete_with_http_info(project_id, test_run_id, opts)
      return data
    end

    # Deletes a Test Run
    # To delete a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_run_id ID of the Test Run
    # @param [Hash] opts the optional parameters
    # @return [Array<(Message, Fixnum, Hash)>] Message data, response status code and response headers
    def delete_with_http_info(project_id, test_run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.delete ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.delete" if project_id.nil?
      # verify the required parameter 'test_run_id' is set
      fail ArgumentError, "Missing the required parameter 'test_run_id' when calling TestrunApi.delete" if test_run_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs/{testRunId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testRunId' + '}', test_run_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Message')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Comment of a Test Run
    # To delete a Comment of a Test Run  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Run.
    # @param comment_id ID of the comment which you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_comment(project_id, id_or_key, comment_id, opts = {})
      data, _status_code, _headers = delete_comment_with_http_info(project_id, id_or_key, comment_id, opts)
      return data
    end

    # Deletes a Comment of a Test Run
    # To delete a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Run.
    # @param comment_id ID of the comment which you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def delete_comment_with_http_info(project_id, id_or_key, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.delete_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.delete_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling TestrunApi.delete_comment" if id_or_key.nil?
      # verify the required parameter 'comment_id' is set
      fail ArgumentError, "Missing the required parameter 'comment_id' when calling TestrunApi.delete_comment" if comment_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#delete_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Test Run
    # To retrieve a Test Run  <strong>qTest Manager version:</strong> 4+
    # @param project_id ID of the project
    # @param test_run_id ID of the Test Run.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case in the response;   ii) &lt;em&gt;testcase.teststep&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response
    # @return [TestRunWithCustomFieldResource]
    def get(project_id, test_run_id, opts = {})
      data, _status_code, _headers = get_with_http_info(project_id, test_run_id, opts)
      return data
    end

    # Gets a Test Run
    # To retrieve a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param project_id ID of the project
    # @param test_run_id ID of the Test Run.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case in the response;   ii) &lt;em&gt;testcase.teststep&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response
    # @return [Array<(TestRunWithCustomFieldResource, Fixnum, Hash)>] TestRunWithCustomFieldResource data, response status code and response headers
    def get_with_http_info(project_id, test_run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.get ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.get" if project_id.nil?
      # verify the required parameter 'test_run_id' is set
      fail ArgumentError, "Missing the required parameter 'test_run_id' when calling TestrunApi.get" if test_run_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs/{testRunId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testRunId' + '}', test_run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestRunWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Comment from a Test Run
    # To retrieve a specific Comment from a Test Run  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Run.
    # @param comment_id ID of the Comment
    # @param [Hash] opts the optional parameters
    # @return [CommentResource]
    def get_comment(project_id, id_or_key, comment_id, opts = {})
      data, _status_code, _headers = get_comment_with_http_info(project_id, id_or_key, comment_id, opts)
      return data
    end

    # Gets a Comment from a Test Run
    # To retrieve a specific Comment from a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Run.
    # @param comment_id ID of the Comment
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommentResource, Fixnum, Hash)>] CommentResource data, response status code and response headers
    def get_comment_with_http_info(project_id, id_or_key, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.get_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.get_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling TestrunApi.get_comment" if id_or_key.nil?
      # verify the required parameter 'comment_id' is set
      fail ArgumentError, "Missing the required parameter 'comment_id' when calling TestrunApi.get_comment" if comment_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#get_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all Comments of a Test Run
    # To retrieve all Comments of a Test Run  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Run
    # @param [Hash] opts the optional parameters
    # @return [PagedResourceCommentResource]
    def get_comments(project_id, id_or_key, opts = {})
      data, _status_code, _headers = get_comments_with_http_info(project_id, id_or_key, opts)
      return data
    end

    # Gets all Comments of a Test Run
    # To retrieve all Comments of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Run
    # @param [Hash] opts the optional parameters
    # @return [Array<(PagedResourceCommentResource, Fixnum, Hash)>] PagedResourceCommentResource data, response status code and response headers
    def get_comments_with_http_info(project_id, id_or_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.get_comments ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.get_comments" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling TestrunApi.get_comments" if id_or_key.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagedResourceCommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#get_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets multiple Test Runs
    # To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root
    # @option opts [String] :parent_type Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt;
    # @option opts [String] :expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include all Test Runs which are directly or indirectly under the container
    # @option opts [Integer] :page By default the first page is returned but you can specify any page number to retrieve objects (default to 1)
    # @option opts [Integer] :page_size The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (default to 100)
    # @return [TestRunListResource]
    def get_of(project_id, opts = {})
      data, _status_code, _headers = get_of_with_http_info(project_id, opts)
      return data
    end

    # Gets multiple Test Runs
    # To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root
    # @option opts [String] :parent_type Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt;
    # @option opts [String] :expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include all Test Runs which are directly or indirectly under the container
    # @option opts [Integer] :page By default the first page is returned but you can specify any page number to retrieve objects
    # @option opts [Integer] :page_size The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
    # @return [Array<(TestRunListResource, Fixnum, Hash)>] TestRunListResource data, response status code and response headers
    def get_of_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.get_of ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.get_of" if project_id.nil?
      if opts[:'parent_type'] && !['root', 'release', 'test-cycle', 'test-suite'].include?(opts[:'parent_type'])
        fail ArgumentError, 'invalid value for "parent_type", must be one of root, release, test-cycle, test-suite'
      end
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'parentType'] = opts[:'parent_type'] if !opts[:'parent_type'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestRunListResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#get_of\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets Test Run statuses
    # Gets Test Run statuses
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<StatusResource>]
    def get_status_valuable(project_id, opts = {})
      data, _status_code, _headers = get_status_valuable_with_http_info(project_id, opts)
      return data
    end

    # Gets Test Run statuses
    # Gets Test Run statuses
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StatusResource>, Fixnum, Hash)>] Array<StatusResource> data, response status code and response headers
    def get_status_valuable_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.get_status_valuable ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.get_status_valuable" if project_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs/execution-statuses".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<StatusResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#get_status_valuable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Test Run
    # To update a Test Run or move it to another container  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param test_run_id ID of the Test Run.
    # @param body The Test Run&#39;s updated properties
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body
    # @option opts [String] :parent_type Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt;
    # @return [TestRunWithCustomFieldResource]
    def update(project_id, test_run_id, body, opts = {})
      data, _status_code, _headers = update_with_http_info(project_id, test_run_id, body, opts)
      return data
    end

    # Updates a Test Run
    # To update a Test Run or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param test_run_id ID of the Test Run.
    # @param body The Test Run&#39;s updated properties
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body
    # @option opts [String] :parent_type Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt;
    # @return [Array<(TestRunWithCustomFieldResource, Fixnum, Hash)>] TestRunWithCustomFieldResource data, response status code and response headers
    def update_with_http_info(project_id, test_run_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.update ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.update" if project_id.nil?
      # verify the required parameter 'test_run_id' is set
      fail ArgumentError, "Missing the required parameter 'test_run_id' when calling TestrunApi.update" if test_run_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestrunApi.update" if body.nil?
      if opts[:'parent_type'] && !['root', 'release', 'test-cycle', 'test-suite'].include?(opts[:'parent_type'])
        fail ArgumentError, 'invalid value for "parent_type", must be one of root, release, test-cycle, test-suite'
      end
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs/{testRunId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'testRunId' + '}', test_run_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'parentType'] = opts[:'parent_type'] if !opts[:'parent_type'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestRunWithCustomFieldResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Comment of a Test Run
    # To update a Comment of a Test Run  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Run
    # @param comment_id ID of the comment which you want to update.
    # @param body The Comment&#39;s updated content
    # @param [Hash] opts the optional parameters
    # @return [CommentResource]
    def update_comment(project_id, id_or_key, comment_id, body, opts = {})
      data, _status_code, _headers = update_comment_with_http_info(project_id, id_or_key, comment_id, body, opts)
      return data
    end

    # Updates a Comment of a Test Run
    # To update a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Test Run
    # @param comment_id ID of the comment which you want to update.
    # @param body The Comment&#39;s updated content
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommentResource, Fixnum, Hash)>] CommentResource data, response status code and response headers
    def update_comment_with_http_info(project_id, id_or_key, comment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestrunApi.update_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling TestrunApi.update_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling TestrunApi.update_comment" if id_or_key.nil?
      # verify the required parameter 'comment_id' is set
      fail ArgumentError, "Missing the required parameter 'comment_id' when calling TestrunApi.update_comment" if comment_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TestrunApi.update_comment" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestrunApi#update_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
