=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ModuleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a Module
    # To create a Module under root or a sub-Module under a parent Module  <strong>qTest Manager version:</strong> 4+
    # @param project_id ID of the project
    # @param body &lt;em&gt;name (required):&lt;/em&gt; the Module name  &lt;em&gt;shared:&lt;/em&gt; Specify &lt;em&gt;shared&#x3D;true&lt;/em&gt; to share this Module to other projects. Only use it if Test Case Sharing feature is enabled in your project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id The parent Module which will contain the newly created one. If it is not specified, the newly created module is located under root  Use this parameter if your qTest Manager version is 6+. For older versions, use &lt;em&gt;parent_id&lt;/em&gt; in the request body
    # @return [ModuleResource]
    def create_module(project_id, body, opts = {})
      data, _status_code, _headers = create_module_with_http_info(project_id, body, opts)
      return data
    end

    # Creates a Module
    # To create a Module under root or a sub-Module under a parent Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param project_id ID of the project
    # @param body &lt;em&gt;name (required):&lt;/em&gt; the Module name  &lt;em&gt;shared:&lt;/em&gt; Specify &lt;em&gt;shared&#x3D;true&lt;/em&gt; to share this Module to other projects. Only use it if Test Case Sharing feature is enabled in your project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id The parent Module which will contain the newly created one. If it is not specified, the newly created module is located under root  Use this parameter if your qTest Manager version is 6+. For older versions, use &lt;em&gt;parent_id&lt;/em&gt; in the request body
    # @return [Array<(ModuleResource, Fixnum, Hash)>] ModuleResource data, response status code and response headers
    def create_module_with_http_info(project_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ModuleApi.create_module ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling ModuleApi.create_module" if project_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ModuleApi.create_module" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/modules".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModuleResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModuleApi#create_module\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Module
    # To delete a Module  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param module_id ID of Module to delete
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force &lt;em&gt;force&#x3D;true&lt;/em&gt; - delete the Module and its children  force&#x3D;false - default value. Only delete the Module if it contains no sub Modules or Test Cases
    # @return [Message]
    def delete_module(project_id, module_id, opts = {})
      data, _status_code, _headers = delete_module_with_http_info(project_id, module_id, opts)
      return data
    end

    # Deletes a Module
    # To delete a Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param module_id ID of Module to delete
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force &lt;em&gt;force&#x3D;true&lt;/em&gt; - delete the Module and its children  force&#x3D;false - default value. Only delete the Module if it contains no sub Modules or Test Cases
    # @return [Array<(Message, Fixnum, Hash)>] Message data, response status code and response headers
    def delete_module_with_http_info(project_id, module_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ModuleApi.delete_module ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling ModuleApi.delete_module" if project_id.nil?
      # verify the required parameter 'module_id' is set
      fail ArgumentError, "Missing the required parameter 'module_id' when calling ModuleApi.delete_module" if module_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/modules/{moduleId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'moduleId' + '}', module_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Message')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModuleApi#delete_module\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Module
    # To retrieve a Module  <em>qTest Manager version:</em> 6+
    # @param project_id ID of the project
    # @param module_id ID of the Module
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include the Module&#39;s sub and grand-sub Modules in the response
    # @return [ModuleResource]
    def get_module(project_id, module_id, opts = {})
      data, _status_code, _headers = get_module_with_http_info(project_id, module_id, opts)
      return data
    end

    # Gets a Module
    # To retrieve a Module  &lt;em&gt;qTest Manager version:&lt;/em&gt; 6+
    # @param project_id ID of the project
    # @param module_id ID of the Module
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include the Module&#39;s sub and grand-sub Modules in the response
    # @return [Array<(ModuleResource, Fixnum, Hash)>] ModuleResource data, response status code and response headers
    def get_module_with_http_info(project_id, module_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ModuleApi.get_module ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling ModuleApi.get_module" if project_id.nil?
      # verify the required parameter 'module_id' is set
      fail ArgumentError, "Missing the required parameter 'module_id' when calling ModuleApi.get_module" if module_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/modules/{moduleId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'moduleId' + '}', module_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModuleResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModuleApi#get_module\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets multiple Modules
    # To search for Modules under root or sub-Modules under a parent Module  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the parent Module. Leave it blank to retrieve Modules under root
    # @option opts [String] :search The free-text to search for Modules by names. You can utilize this parameter to search for Modules. Leave it blank to retrieve all Modules under root or the parent Module
    # @option opts [String] :expand 
    # @return [Array<ModuleResource>]
    def get_sub_modules_of(project_id, opts = {})
      data, _status_code, _headers = get_sub_modules_of_with_http_info(project_id, opts)
      return data
    end

    # Gets multiple Modules
    # To search for Modules under root or sub-Modules under a parent Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the parent Module. Leave it blank to retrieve Modules under root
    # @option opts [String] :search The free-text to search for Modules by names. You can utilize this parameter to search for Modules. Leave it blank to retrieve all Modules under root or the parent Module
    # @option opts [String] :expand 
    # @return [Array<(Array<ModuleResource>, Fixnum, Hash)>] Array<ModuleResource> data, response status code and response headers
    def get_sub_modules_of_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ModuleApi.get_sub_modules_of ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling ModuleApi.get_sub_modules_of" if project_id.nil?
      if opts[:'expand'] && !['descendants'].include?(opts[:'expand'])
        fail ArgumentError, 'invalid value for "expand", must be one of descendants'
      end
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/modules".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModuleResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModuleApi#get_sub_modules_of\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Module
    # To update a Module or move it to another parent Module
    # @param project_id ID of the project
    # @param module_id ID of the Module
    # @param body The Module&#39;s update properties
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the parent Module which the Module will be moved to  &lt;strong&gt;Important:&lt;/strong&gt; If you use this parameter, the request body will be ignored. That means the Module is being moved but it will not be updated with the properties specified in the request body
    # @return [ModuleResource]
    def update_module(project_id, module_id, body, opts = {})
      data, _status_code, _headers = update_module_with_http_info(project_id, module_id, body, opts)
      return data
    end

    # Updates a Module
    # To update a Module or move it to another parent Module
    # @param project_id ID of the project
    # @param module_id ID of the Module
    # @param body The Module&#39;s update properties
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the parent Module which the Module will be moved to  &lt;strong&gt;Important:&lt;/strong&gt; If you use this parameter, the request body will be ignored. That means the Module is being moved but it will not be updated with the properties specified in the request body
    # @return [Array<(ModuleResource, Fixnum, Hash)>] ModuleResource data, response status code and response headers
    def update_module_with_http_info(project_id, module_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ModuleApi.update_module ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling ModuleApi.update_module" if project_id.nil?
      # verify the required parameter 'module_id' is set
      fail ArgumentError, "Missing the required parameter 'module_id' when calling ModuleApi.update_module" if module_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ModuleApi.update_module" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/modules/{moduleId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'moduleId' + '}', module_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModuleResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModuleApi#update_module\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
