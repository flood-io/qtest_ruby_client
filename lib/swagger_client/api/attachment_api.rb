=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class AttachmentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Deletes an Attachment from an Object
    # To delete an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step or Defect  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param blob_handle_id ID of the Attachment
    # @param object_type Valid values include releases, builds, requirements, test-cases, test-logs, test-steps or defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param object_id ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step or Defect)
    # @param [Hash] opts the optional parameters
    # @return [Message]
    def delete(project_id, blob_handle_id, object_type, object_id, opts = {})
      data, _status_code, _headers = delete_with_http_info(project_id, blob_handle_id, object_type, object_id, opts)
      return data
    end

    # Deletes an Attachment from an Object
    # To delete an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step or Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param blob_handle_id ID of the Attachment
    # @param object_type Valid values include releases, builds, requirements, test-cases, test-logs, test-steps or defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param object_id ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step or Defect)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Message, Fixnum, Hash)>] Message data, response status code and response headers
    def delete_with_http_info(project_id, blob_handle_id, object_type, object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttachmentApi.delete ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling AttachmentApi.delete" if project_id.nil?
      # verify the required parameter 'blob_handle_id' is set
      fail ArgumentError, "Missing the required parameter 'blob_handle_id' when calling AttachmentApi.delete" if blob_handle_id.nil?
      # verify the required parameter 'object_type' is set
      fail ArgumentError, "Missing the required parameter 'object_type' when calling AttachmentApi.delete" if object_type.nil?
      # verify enum value
      unless ['releases', 'builds', 'requirements', 'test-cases', 'test-logs', 'test-steps', 'defects'].include?(object_type)
        fail ArgumentError, "invalid value for 'object_type', must be one of releases, builds, requirements, test-cases, test-logs, test-steps, defects"
      end
      # verify the required parameter 'object_id' is set
      fail ArgumentError, "Missing the required parameter 'object_id' when calling AttachmentApi.delete" if object_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/{objectType}/{objectId}/blob-handles/{blobHandleId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'blobHandleId' + '}', blob_handle_id.to_s).sub('{' + 'objectType' + '}', object_type.to_s).sub('{' + 'objectId' + '}', object_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Message')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttachmentApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets an Attachment of an Object
    # To retrieve an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step or Defect
    # @param project_id ID of the project
    # @param attachment_id ID of attachment
    # @param object_type Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;
    # @param object_id ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step or Defect)
    # @param [Hash] opts the optional parameters
    # @return [OutputStream]
    def get_attachment(project_id, attachment_id, object_type, object_id, opts = {})
      data, _status_code, _headers = get_attachment_with_http_info(project_id, attachment_id, object_type, object_id, opts)
      return data
    end

    # Gets an Attachment of an Object
    # To retrieve an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step or Defect
    # @param project_id ID of the project
    # @param attachment_id ID of attachment
    # @param object_type Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;
    # @param object_id ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step or Defect)
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputStream, Fixnum, Hash)>] OutputStream data, response status code and response headers
    def get_attachment_with_http_info(project_id, attachment_id, object_type, object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttachmentApi.get_attachment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling AttachmentApi.get_attachment" if project_id.nil?
      # verify the required parameter 'attachment_id' is set
      fail ArgumentError, "Missing the required parameter 'attachment_id' when calling AttachmentApi.get_attachment" if attachment_id.nil?
      # verify the required parameter 'object_type' is set
      fail ArgumentError, "Missing the required parameter 'object_type' when calling AttachmentApi.get_attachment" if object_type.nil?
      # verify enum value
      unless ['releases', 'builds', 'requirements', 'test-cases', 'test-logs', 'test-steps', 'defects'].include?(object_type)
        fail ArgumentError, "invalid value for 'object_type', must be one of releases, builds, requirements, test-cases, test-logs, test-steps, defects"
      end
      # verify the required parameter 'object_id' is set
      fail ArgumentError, "Missing the required parameter 'object_id' when calling AttachmentApi.get_attachment" if object_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/{objectType}/{objectId}/attachments/{attachmentId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'attachmentId' + '}', attachment_id.to_s).sub('{' + 'objectType' + '}', object_type.to_s).sub('{' + 'objectId' + '}', object_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OutputStream')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttachmentApi#get_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all Attachments of an Object
    # To retrieve all Attachments of a Release, Build, Requirement, Test Case, Test Log, Test Step or Defect
    # @param project_id ID of the project
    # @param object_type Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;
    # @param object_id ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step or Defect)
    # @param [Hash] opts the optional parameters
    # @return [Array<AttachmentResource>]
    def get_attachments_of(project_id, object_type, object_id, opts = {})
      data, _status_code, _headers = get_attachments_of_with_http_info(project_id, object_type, object_id, opts)
      return data
    end

    # Gets all Attachments of an Object
    # To retrieve all Attachments of a Release, Build, Requirement, Test Case, Test Log, Test Step or Defect
    # @param project_id ID of the project
    # @param object_type Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;
    # @param object_id ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step or Defect)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AttachmentResource>, Fixnum, Hash)>] Array<AttachmentResource> data, response status code and response headers
    def get_attachments_of_with_http_info(project_id, object_type, object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttachmentApi.get_attachments_of ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling AttachmentApi.get_attachments_of" if project_id.nil?
      # verify the required parameter 'object_type' is set
      fail ArgumentError, "Missing the required parameter 'object_type' when calling AttachmentApi.get_attachments_of" if object_type.nil?
      # verify enum value
      unless ['releases', 'builds', 'requirements', 'test-cases', 'test-logs', 'test-steps', 'defects'].include?(object_type)
        fail ArgumentError, "invalid value for 'object_type', must be one of releases, builds, requirements, test-cases, test-logs, test-steps, defects"
      end
      # verify the required parameter 'object_id' is set
      fail ArgumentError, "Missing the required parameter 'object_id' when calling AttachmentApi.get_attachments_of" if object_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/{objectType}/{objectId}/attachments".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'objectType' + '}', object_type.to_s).sub('{' + 'objectId' + '}', object_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AttachmentResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttachmentApi#get_attachments_of\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Searches for Attachments
    # To query for attachments of <em>Releases</em>, <em>Builds</em>, <em>Requirements</em>, <em>Test Cases</em>, <em>Test Logs</em>, <em>Test Steps</em> or <em>Defects</em>
    # @param project_id ID of the project
    # @param type Its valid values include &lt;em&gt;releases&lt;/em&gt;, &lt;em&gt;builds&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids List of object IDs (of the same type as specified in the parameter above), separated by commas
    # @option opts [Integer] :author ID of the user who created the attachment
    # @option opts [String] :created_date Its format is: &lt;strong&gt;{operator} {createdDate in timestamp or UTC}&lt;/strong&gt;  The &lt;em&gt;operator&lt;/em&gt; can be one of the following values:  &lt;b&gt;lt&lt;/b&gt;: less than the given date  &lt;b&gt;gt&lt;/b&gt;: greater than given date  &lt;b&gt;eq&lt;/b&gt;: equal to the given date  &lt;b&gt;le&lt;/b&gt;: less than or equal to the given date  &lt;b&gt;ge&lt;/b&gt;: greater then or equal to the given date
    # @option opts [Integer] :page_size The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (default to 100)
    # @option opts [Integer] :page By default, the first page is returned but you can specify any page number to retrieve attachments (default to 1)
    # @return [PagedResourceAttachmentResource]
    def search(project_id, type, opts = {})
      data, _status_code, _headers = search_with_http_info(project_id, type, opts)
      return data
    end

    # Searches for Attachments
    # To query for attachments of &lt;em&gt;Releases&lt;/em&gt;, &lt;em&gt;Builds&lt;/em&gt;, &lt;em&gt;Requirements&lt;/em&gt;, &lt;em&gt;Test Cases&lt;/em&gt;, &lt;em&gt;Test Logs&lt;/em&gt;, &lt;em&gt;Test Steps&lt;/em&gt; or &lt;em&gt;Defects&lt;/em&gt;
    # @param project_id ID of the project
    # @param type Its valid values include &lt;em&gt;releases&lt;/em&gt;, &lt;em&gt;builds&lt;/em&gt;, &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-steps&lt;/em&gt;, &lt;em&gt;test-logs&lt;/em&gt; or &lt;em&gt;defects&lt;/em&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids List of object IDs (of the same type as specified in the parameter above), separated by commas
    # @option opts [Integer] :author ID of the user who created the attachment
    # @option opts [String] :created_date Its format is: &lt;strong&gt;{operator} {createdDate in timestamp or UTC}&lt;/strong&gt;  The &lt;em&gt;operator&lt;/em&gt; can be one of the following values:  &lt;b&gt;lt&lt;/b&gt;: less than the given date  &lt;b&gt;gt&lt;/b&gt;: greater than given date  &lt;b&gt;eq&lt;/b&gt;: equal to the given date  &lt;b&gt;le&lt;/b&gt;: less than or equal to the given date  &lt;b&gt;ge&lt;/b&gt;: greater then or equal to the given date
    # @option opts [Integer] :page_size The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
    # @option opts [Integer] :page By default, the first page is returned but you can specify any page number to retrieve attachments
    # @return [Array<(PagedResourceAttachmentResource, Fixnum, Hash)>] PagedResourceAttachmentResource data, response status code and response headers
    def search_with_http_info(project_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttachmentApi.search ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling AttachmentApi.search" if project_id.nil?
      # verify the required parameter 'type' is set
      fail ArgumentError, "Missing the required parameter 'type' when calling AttachmentApi.search" if type.nil?
      # verify enum value
      unless ['releases', 'builds', 'requirements', 'test-cases', 'test-steps', 'test-logs', 'defects'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of releases, builds, requirements, test-cases, test-steps, test-logs, defects"
      end
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/attachments".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = type
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'author'] = opts[:'author'] if !opts[:'author'].nil?
      query_params[:'createdDate'] = opts[:'created_date'] if !opts[:'created_date'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagedResourceAttachmentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttachmentApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uploads an Attachment to an Object
    # To upload an Attachment to a Release, Build, Requirement, Test Case, Test Log, Test Step, or Defect
    # @param project_id ID of the project
    # @param object_type Valid values include releases, builds, requirements, test-cases, test-logs, test-steps or defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param object_id ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step or Defect)
    # @param file_name 
    # @param content_type 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AttachmentResource]
    def upload(project_id, object_type, object_id, file_name, content_type, body, opts = {})
      data, _status_code, _headers = upload_with_http_info(project_id, object_type, object_id, file_name, content_type, body, opts)
      return data
    end

    # Uploads an Attachment to an Object
    # To upload an Attachment to a Release, Build, Requirement, Test Case, Test Log, Test Step, or Defect
    # @param project_id ID of the project
    # @param object_type Valid values include releases, builds, requirements, test-cases, test-logs, test-steps or defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param object_id ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step or Defect)
    # @param file_name 
    # @param content_type 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttachmentResource, Fixnum, Hash)>] AttachmentResource data, response status code and response headers
    def upload_with_http_info(project_id, object_type, object_id, file_name, content_type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttachmentApi.upload ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling AttachmentApi.upload" if project_id.nil?
      # verify the required parameter 'object_type' is set
      fail ArgumentError, "Missing the required parameter 'object_type' when calling AttachmentApi.upload" if object_type.nil?
      # verify enum value
      unless ['releases', 'builds', 'requirements', 'test-cases', 'test-logs', 'test-steps', 'defects'].include?(object_type)
        fail ArgumentError, "invalid value for 'object_type', must be one of releases, builds, requirements, test-cases, test-logs, test-steps, defects"
      end
      # verify the required parameter 'object_id' is set
      fail ArgumentError, "Missing the required parameter 'object_id' when calling AttachmentApi.upload" if object_id.nil?
      # verify the required parameter 'file_name' is set
      fail ArgumentError, "Missing the required parameter 'file_name' when calling AttachmentApi.upload" if file_name.nil?
      # verify the required parameter 'content_type' is set
      fail ArgumentError, "Missing the required parameter 'content_type' when calling AttachmentApi.upload" if content_type.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AttachmentApi.upload" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/{objectType}/{objectId}/blob-handles".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'objectType' + '}', object_type.to_s).sub('{' + 'objectId' + '}', object_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'File-Name'] = file_name
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AttachmentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttachmentApi#upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
