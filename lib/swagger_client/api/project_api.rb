=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ProjectApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a Project
    # To create a new Project  <strong>qTest Manager version:</strong> 4+
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_project(body, opts = {})
      data, _status_code, _headers = create_project_with_http_info(body, opts)
      return data
    end

    # Creates a Project
    # To create a new Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_project_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectApi.create_project ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ProjectApi.create_project" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#create_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets current user Permissions in a Project
    # To retrieve your Permissions in a Project  <strong>qTest Manager version:</strong> 4+
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @return [UserProfile]
    def get_current_profile(project_id, opts = {})
      data, _status_code, _headers = get_current_profile_with_http_info(project_id, opts)
      return data
    end

    # Gets current user Permissions in a Project
    # To retrieve your Permissions in a Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserProfile, Fixnum, Hash)>] UserProfile data, response status code and response headers
    def get_current_profile_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectApi.get_current_profile ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.get_current_profile" if project_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/user-profiles/current".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#get_current_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Project
    # To retrieve a specific Project
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand &lt;em&gt;expand&#x3D;userprofile&lt;/em&gt; - include the your profile and permissions within the project in the response
    # @return [ProjectResource]
    def get_project(project_id, opts = {})
      data, _status_code, _headers = get_project_with_http_info(project_id, opts)
      return data
    end

    # Gets a Project
    # To retrieve a specific Project
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand &lt;em&gt;expand&#x3D;userprofile&lt;/em&gt; - include the your profile and permissions within the project in the response
    # @return [Array<(ProjectResource, Fixnum, Hash)>] ProjectResource data, response status code and response headers
    def get_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectApi.get_project ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.get_project" if project_id.nil?
      if opts[:'expand'] && !['userprofile'].include?(opts[:'expand'])
        fail ArgumentError, 'invalid value for "expand", must be one of userprofile'
      end
      # resource path
      local_var_path = "/api/v3/projects/{projectId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#get_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets multiple Projects
    # To retrieve all Projects which the requested qTest  Manager account can access to  <strong>qTest Manager version:</strong> 4+
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand &lt;em&gt;expand&#x3D;userprofile&lt;/em&gt; - to include your profile and permissions in each project
    # @option opts [BOOLEAN] :assigned &lt;em&gt;assigned&#x3D;true&lt;/em&gt; - default value. Only the projects which the requested user has access to  &lt;em&gt;assigned&#x3D;false&lt;/em&gt; - Users with admin profile can use this value to retrieve all projects, regardless of having access
    # @return [Array<ProjectResource>]
    def get_projects(opts = {})
      data, _status_code, _headers = get_projects_with_http_info(opts)
      return data
    end

    # Gets multiple Projects
    # To retrieve all Projects which the requested qTest  Manager account can access to  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand &lt;em&gt;expand&#x3D;userprofile&lt;/em&gt; - to include your profile and permissions in each project
    # @option opts [BOOLEAN] :assigned &lt;em&gt;assigned&#x3D;true&lt;/em&gt; - default value. Only the projects which the requested user has access to  &lt;em&gt;assigned&#x3D;false&lt;/em&gt; - Users with admin profile can use this value to retrieve all projects, regardless of having access
    # @return [Array<(Array<ProjectResource>, Fixnum, Hash)>] Array<ProjectResource> data, response status code and response headers
    def get_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectApi.get_projects ..."
      end
      if opts[:'expand'] && !['userprofile'].include?(opts[:'expand'])
        fail ArgumentError, 'invalid value for "expand", must be one of userprofile'
      end
      # resource path
      local_var_path = "/api/v3/projects".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'assigned'] = opts[:'assigned'] if !opts[:'assigned'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ProjectResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#get_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all Users in a Project
    # To retrieve all members in a qTest Manager Project  <strong>qTest Manager version:</strong> 8.4.2+
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :inactive &lt;em&gt;inactive&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;inactive&#x3D;true&lt;/em&gt; - inactive users are included in the response
    # @return [Array<UserResource>]
    def get_users(project_id, opts = {})
      data, _status_code, _headers = get_users_with_http_info(project_id, opts)
      return data
    end

    # Gets all Users in a Project
    # To retrieve all members in a qTest Manager Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.4.2+
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :inactive &lt;em&gt;inactive&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;inactive&#x3D;true&lt;/em&gt; - inactive users are included in the response
    # @return [Array<(Array<UserResource>, Fixnum, Hash)>] Array<UserResource> data, response status code and response headers
    def get_users_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProjectApi.get_users ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.get_users" if project_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/users".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'inactive'] = opts[:'inactive'] if !opts[:'inactive'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
