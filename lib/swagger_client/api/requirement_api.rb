=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class RequirementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Adds a Comment to a Requirement
    # To add a comment to a Requirement  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Requirement.
    # @param body The comment&#39;s properties and its content
    # @param [Hash] opts the optional parameters
    # @return [CommentResource]
    def add_comment(project_id, id_or_key, body, opts = {})
      data, _status_code, _headers = add_comment_with_http_info(project_id, id_or_key, body, opts)
      return data
    end

    # Adds a Comment to a Requirement
    # To add a comment to a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Requirement.
    # @param body The comment&#39;s properties and its content
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommentResource, Fixnum, Hash)>] CommentResource data, response status code and response headers
    def add_comment_with_http_info(project_id, id_or_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.add_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.add_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling RequirementApi.add_comment" if id_or_key.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RequirementApi.add_comment" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements/{idOrKey}/comments".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#add_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Requirement
    # To create a new Requirement  <strong>qTest Manager version:</strong> 4+
    # @param project_id ID of the project
    # @param body &lt;p&gt;&lt;em&gt;name *:&lt;/em&gt; Requirement name&lt;/p&gt;&lt;p&gt;&lt;em&gt;properties:&lt;/em&gt; An array of field-value pairs&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the parent Module under which the Requirement will be located
    # @return [RequirementResource]
    def create_requirement(project_id, body, opts = {})
      data, _status_code, _headers = create_requirement_with_http_info(project_id, body, opts)
      return data
    end

    # Creates a Requirement
    # To create a new Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param project_id ID of the project
    # @param body &lt;p&gt;&lt;em&gt;name *:&lt;/em&gt; Requirement name&lt;/p&gt;&lt;p&gt;&lt;em&gt;properties:&lt;/em&gt; An array of field-value pairs&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the parent Module under which the Requirement will be located
    # @return [Array<(RequirementResource, Fixnum, Hash)>] RequirementResource data, response status code and response headers
    def create_requirement_with_http_info(project_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.create_requirement ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.create_requirement" if project_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RequirementApi.create_requirement" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RequirementResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#create_requirement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Requirement
    # To delete a Requirement  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param requirement_id ID of the Requirement which needs to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete(project_id, requirement_id, opts = {})
      data, _status_code, _headers = delete_with_http_info(project_id, requirement_id, opts)
      return data
    end

    # Deletes a Requirement
    # To delete a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param requirement_id ID of the Requirement which needs to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def delete_with_http_info(project_id, requirement_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.delete ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.delete" if project_id.nil?
      # verify the required parameter 'requirement_id' is set
      fail ArgumentError, "Missing the required parameter 'requirement_id' when calling RequirementApi.delete" if requirement_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements/{requirementId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'requirementId' + '}', requirement_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Comment of a Requirement
    # To delete a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Requirement whose comment you want to delete
    # @param comment_id The comment&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_comment(project_id, id_or_key, comment_id, opts = {})
      data, _status_code, _headers = delete_comment_with_http_info(project_id, id_or_key, comment_id, opts)
      return data
    end

    # Deletes a Comment of a Requirement
    # To delete a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Requirement whose comment you want to delete
    # @param comment_id The comment&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def delete_comment_with_http_info(project_id, id_or_key, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.delete_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.delete_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling RequirementApi.delete_comment" if id_or_key.nil?
      # verify the required parameter 'comment_id' is set
      fail ArgumentError, "Missing the required parameter 'comment_id' when calling RequirementApi.delete_comment" if comment_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#delete_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Comment of a Requirement
    # To retrieve a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Requirement whose comment you want to delete
    # @param comment_id The comment&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [CommentResource]
    def get_comment(project_id, id_or_key, comment_id, opts = {})
      data, _status_code, _headers = get_comment_with_http_info(project_id, id_or_key, comment_id, opts)
      return data
    end

    # Gets a Comment of a Requirement
    # To retrieve a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Requirement whose comment you want to delete
    # @param comment_id The comment&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommentResource, Fixnum, Hash)>] CommentResource data, response status code and response headers
    def get_comment_with_http_info(project_id, id_or_key, comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.get_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.get_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling RequirementApi.get_comment" if id_or_key.nil?
      # verify the required parameter 'comment_id' is set
      fail ArgumentError, "Missing the required parameter 'comment_id' when calling RequirementApi.get_comment" if comment_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#get_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all Comments of a Requirement
    # To retrieve all comments of a Requirement  <strong>qTest Manager version:</strong> 7.6+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Requirement whose comments you want to retrieve
    # @param [Hash] opts the optional parameters
    # @return [PagedResourceCommentResource]
    def get_comments(project_id, id_or_key, opts = {})
      data, _status_code, _headers = get_comments_with_http_info(project_id, id_or_key, opts)
      return data
    end

    # Gets all Comments of a Requirement
    # To retrieve all comments of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Requirement whose comments you want to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(PagedResourceCommentResource, Fixnum, Hash)>] PagedResourceCommentResource data, response status code and response headers
    def get_comments_with_http_info(project_id, id_or_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.get_comments ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.get_comments" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling RequirementApi.get_comments" if id_or_key.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements/{idOrKey}/comments".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagedResourceCommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#get_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets Requirement Traceability Matrix Report
    # To retrieve a report of Requirements with their covering Test Cases
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page By default the first page is returned but you can specify any page number to retrieve requirements. (default to 1)
    # @option opts [Integer] :size The result is paginated. By default, the number of requirements in each page is 20.  You can specify your custom number in this parameter and the maximum number is 999. (default to 20)
    # @option opts [String] :field_ids ID(s) of requirement fields (system or custom fields) which you would like to retrieve.  They are separated by commas.
    # @return [Array<TraceabilityRequirement>]
    def get_public_traceability_matrix_report(project_id, opts = {})
      data, _status_code, _headers = get_public_traceability_matrix_report_with_http_info(project_id, opts)
      return data
    end

    # Gets Requirement Traceability Matrix Report
    # To retrieve a report of Requirements with their covering Test Cases
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page By default the first page is returned but you can specify any page number to retrieve requirements.
    # @option opts [Integer] :size The result is paginated. By default, the number of requirements in each page is 20.  You can specify your custom number in this parameter and the maximum number is 999.
    # @option opts [String] :field_ids ID(s) of requirement fields (system or custom fields) which you would like to retrieve.  They are separated by commas.
    # @return [Array<(Array<TraceabilityRequirement>, Fixnum, Hash)>] Array<TraceabilityRequirement> data, response status code and response headers
    def get_public_traceability_matrix_report_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.get_public_traceability_matrix_report ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.get_public_traceability_matrix_report" if project_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements/trace-matrix-report".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'fieldIds'] = opts[:'field_ids'] if !opts[:'field_ids'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TraceabilityRequirement>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#get_public_traceability_matrix_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Requirement
    # To retrieve a Requirement  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param requirement_id ID of the Requirement which you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [RequirementResource]
    def get_requirement(project_id, requirement_id, opts = {})
      data, _status_code, _headers = get_requirement_with_http_info(project_id, requirement_id, opts)
      return data
    end

    # Gets a Requirement
    # To retrieve a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param requirement_id ID of the Requirement which you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RequirementResource, Fixnum, Hash)>] RequirementResource data, response status code and response headers
    def get_requirement_with_http_info(project_id, requirement_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.get_requirement ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.get_requirement" if project_id.nil?
      # verify the required parameter 'requirement_id' is set
      fail ArgumentError, "Missing the required parameter 'requirement_id' when calling RequirementApi.get_requirement" if requirement_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements/{requirementId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'requirementId' + '}', requirement_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RequirementResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#get_requirement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets multiple Requirements
    # To retrieve all Requirements or Requirements under a specific Module
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id Specify the parent Module&#39;s ID to retrieve all of its Requirements which are located directly under the parent Module
    # @option opts [Integer] :page By default the first page is returned but you can specify any page number to retrieve requirements. (default to 1)
    # @option opts [Integer] :size The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter.
    # @return [Array<RequirementResource>]
    def get_requirements(project_id, opts = {})
      data, _status_code, _headers = get_requirements_with_http_info(project_id, opts)
      return data
    end

    # Gets multiple Requirements
    # To retrieve all Requirements or Requirements under a specific Module
    # @param project_id ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id Specify the parent Module&#39;s ID to retrieve all of its Requirements which are located directly under the parent Module
    # @option opts [Integer] :page By default the first page is returned but you can specify any page number to retrieve requirements.
    # @option opts [Integer] :size The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter.
    # @return [Array<(Array<RequirementResource>, Fixnum, Hash)>] Array<RequirementResource> data, response status code and response headers
    def get_requirements_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.get_requirements ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.get_requirements" if project_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<RequirementResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#get_requirements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Comment of a Requirement
    # To modify a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Requirement whose comment you want to update
    # @param comment_id The comment&#39;s ID
    # @param body The comment&#39;s updated content
    # @param [Hash] opts the optional parameters
    # @return [CommentResource]
    def update_comment(project_id, id_or_key, comment_id, body, opts = {})
      data, _status_code, _headers = update_comment_with_http_info(project_id, id_or_key, comment_id, body, opts)
      return data
    end

    # Updates a Comment of a Requirement
    # To modify a comment of a Requirement  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
    # @param project_id ID of the project
    # @param id_or_key PID or ID of the Requirement whose comment you want to update
    # @param comment_id The comment&#39;s ID
    # @param body The comment&#39;s updated content
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommentResource, Fixnum, Hash)>] CommentResource data, response status code and response headers
    def update_comment_with_http_info(project_id, id_or_key, comment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.update_comment ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.update_comment" if project_id.nil?
      # verify the required parameter 'id_or_key' is set
      fail ArgumentError, "Missing the required parameter 'id_or_key' when calling RequirementApi.update_comment" if id_or_key.nil?
      # verify the required parameter 'comment_id' is set
      fail ArgumentError, "Missing the required parameter 'comment_id' when calling RequirementApi.update_comment" if comment_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RequirementApi.update_comment" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'idOrKey' + '}', id_or_key.to_s).sub('{' + 'commentId' + '}', comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#update_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Requirement
    # To update properties of an Requirement or to move it to other parent Module
    # @param project_id ID of the project
    # @param requirement_id ID of the Requirement which needs to be updated.
    # @param body &lt;strong&gt;name: *&lt;/strong&gt; Requirement name.  &lt;strong&gt;properties:&lt;/strong&gt; An array of field-value pairs
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the parent Module to which the Requirement will be moved to
    # @return [RequirementResource]
    def update_requirement(project_id, requirement_id, body, opts = {})
      data, _status_code, _headers = update_requirement_with_http_info(project_id, requirement_id, body, opts)
      return data
    end

    # Updates a Requirement
    # To update properties of an Requirement or to move it to other parent Module
    # @param project_id ID of the project
    # @param requirement_id ID of the Requirement which needs to be updated.
    # @param body &lt;strong&gt;name: *&lt;/strong&gt; Requirement name.  &lt;strong&gt;properties:&lt;/strong&gt; An array of field-value pairs
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :parent_id ID of the parent Module to which the Requirement will be moved to
    # @return [Array<(RequirementResource, Fixnum, Hash)>] RequirementResource data, response status code and response headers
    def update_requirement_with_http_info(project_id, requirement_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RequirementApi.update_requirement ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling RequirementApi.update_requirement" if project_id.nil?
      # verify the required parameter 'requirement_id' is set
      fail ArgumentError, "Missing the required parameter 'requirement_id' when calling RequirementApi.update_requirement" if requirement_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RequirementApi.update_requirement" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/requirements/{requirementId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'requirementId' + '}', requirement_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RequirementResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RequirementApi#update_requirement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
