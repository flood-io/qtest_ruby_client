=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class BuildApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a Build
    # To create a Build under a parent Release  <strong>qTest Manager version:</strong> 4+
    # @param project_id ID of the project
    # @param body &lt;em&gt;name (required):&lt;/em&gt; Build name  &lt;em&gt;release (required):&lt;/em&gt; The parent Release under which the Build will be located  &lt;em&gt;properties:&lt;/em&gt; An array of field-value pairs
    # @param [Hash] opts the optional parameters
    # @return [BuildResource]
    def create(project_id, body, opts = {})
      data, _status_code, _headers = create_with_http_info(project_id, body, opts)
      return data
    end

    # Creates a Build
    # To create a Build under a parent Release  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param project_id ID of the project
    # @param body &lt;em&gt;name (required):&lt;/em&gt; Build name  &lt;em&gt;release (required):&lt;/em&gt; The parent Release under which the Build will be located  &lt;em&gt;properties:&lt;/em&gt; An array of field-value pairs
    # @param [Hash] opts the optional parameters
    # @return [Array<(BuildResource, Fixnum, Hash)>] BuildResource data, response status code and response headers
    def create_with_http_info(project_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BuildApi.create ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling BuildApi.create" if project_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling BuildApi.create" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/builds".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BuildResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Build
    # To delete a Build  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param build_id ID of the Build to delete
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete(project_id, build_id, opts = {})
      data, _status_code, _headers = delete_with_http_info(project_id, build_id, opts)
      return data
    end

    # Deletes a Build
    # To delete a Build  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param build_id ID of the Build to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def delete_with_http_info(project_id, build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BuildApi.delete ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling BuildApi.delete" if project_id.nil?
      # verify the required parameter 'build_id' is set
      fail ArgumentError, "Missing the required parameter 'build_id' when calling BuildApi.delete" if build_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/builds/{buildId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'buildId' + '}', build_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a Build
    # To retrieve a Build<strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param build_id ID of the Build
    # @param [Hash] opts the optional parameters
    # @return [BuildResource]
    def get(project_id, build_id, opts = {})
      data, _status_code, _headers = get_with_http_info(project_id, build_id, opts)
      return data
    end

    # Gets a Build
    # To retrieve a Build&lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param build_id ID of the Build
    # @param [Hash] opts the optional parameters
    # @return [Array<(BuildResource, Fixnum, Hash)>] BuildResource data, response status code and response headers
    def get_with_http_info(project_id, build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BuildApi.get ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling BuildApi.get" if project_id.nil?
      # verify the required parameter 'build_id' is set
      fail ArgumentError, "Missing the required parameter 'build_id' when calling BuildApi.get" if build_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/builds/{buildId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'buildId' + '}', build_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BuildResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets multiple Builds
    # To retrieve all Builds under a Release  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param release_id ID of the parent Release
    # @param [Hash] opts the optional parameters
    # @return [Array<BuildResource>]
    def get_builds(project_id, release_id, opts = {})
      data, _status_code, _headers = get_builds_with_http_info(project_id, release_id, opts)
      return data
    end

    # Gets multiple Builds
    # To retrieve all Builds under a Release  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param release_id ID of the parent Release
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BuildResource>, Fixnum, Hash)>] Array<BuildResource> data, response status code and response headers
    def get_builds_with_http_info(project_id, release_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BuildApi.get_builds ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling BuildApi.get_builds" if project_id.nil?
      # verify the required parameter 'release_id' is set
      fail ArgumentError, "Missing the required parameter 'release_id' when calling BuildApi.get_builds" if release_id.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/builds".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'releaseId'] = release_id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BuildResource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildApi#get_builds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Build
    # To update a Build  <strong>qTest Manager version:</strong> 6+
    # @param project_id ID of the project
    # @param build_id ID of the Build
    # @param body The Build&#39;s updated properties
    # @param [Hash] opts the optional parameters
    # @return [BuildResource]
    def update(project_id, build_id, body, opts = {})
      data, _status_code, _headers = update_with_http_info(project_id, build_id, body, opts)
      return data
    end

    # Updates a Build
    # To update a Build  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
    # @param project_id ID of the project
    # @param build_id ID of the Build
    # @param body The Build&#39;s updated properties
    # @param [Hash] opts the optional parameters
    # @return [Array<(BuildResource, Fixnum, Hash)>] BuildResource data, response status code and response headers
    def update_with_http_info(project_id, build_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BuildApi.update ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling BuildApi.update" if project_id.nil?
      # verify the required parameter 'build_id' is set
      fail ArgumentError, "Missing the required parameter 'build_id' when calling BuildApi.update" if build_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling BuildApi.update" if body.nil?
      # resource path
      local_var_path = "/api/v3/projects/{projectId}/builds/{buildId}".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'buildId' + '}', build_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BuildResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
