=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class UserprofileApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Assigns multiple Users to a Profile
    # To batch assign users to a profile (Admin profile, User profile) (as in qTest Manager <em>admin panel</em>). It requires that your qTest Manager profile is a site admin with <em>Manage Client Users</em> permissions  <strong>qTest Manager version:</strong> 8.4.2+
    # @param body An array of user IDs and admin and/or normal user profile
    # @param [Hash] opts the optional parameters
    # @return [Array<UserResourceExtension>]
    def batch_assign_user_profile_in_client(body, opts = {})
      data, _status_code, _headers = batch_assign_user_profile_in_client_with_http_info(body, opts)
      return data
    end

    # Assigns multiple Users to a Profile
    # To batch assign users to a profile (Admin profile, User profile) (as in qTest Manager &lt;em&gt;admin panel&lt;/em&gt;). It requires that your qTest Manager profile is a site admin with &lt;em&gt;Manage Client Users&lt;/em&gt; permissions  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.4.2+
    # @param body An array of user IDs and admin and/or normal user profile
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserResourceExtension>, Fixnum, Hash)>] Array<UserResourceExtension> data, response status code and response headers
    def batch_assign_user_profile_in_client_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserprofileApi.batch_assign_user_profile_in_client ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling UserprofileApi.batch_assign_user_profile_in_client" if body.nil?
      # resource path
      local_var_path = "/api/v3/user-profiles/batch-assign-users".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserResourceExtension>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserprofileApi#batch_assign_user_profile_in_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assigns multiple Users to a Profile in a Project
    # To change profile of assigned users (as a project's User Management page). It requires that your qTest Manager profile within the project is Project Admin  <strong>qTest Manager version:</strong> 8.4.2+
    # @param project_id ID of the project
    # @param body An array of user IDs and a user profile
    # @param [Hash] opts the optional parameters
    # @return [Array<UserResourceExtension>]
    def batch_assign_user_profile_in_project(project_id, body, opts = {})
      data, _status_code, _headers = batch_assign_user_profile_in_project_with_http_info(project_id, body, opts)
      return data
    end

    # Assigns multiple Users to a Profile in a Project
    # To change profile of assigned users (as a project&#39;s User Management page). It requires that your qTest Manager profile within the project is Project Admin  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.4.2+
    # @param project_id ID of the project
    # @param body An array of user IDs and a user profile
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserResourceExtension>, Fixnum, Hash)>] Array<UserResourceExtension> data, response status code and response headers
    def batch_assign_user_profile_in_project_with_http_info(project_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserprofileApi.batch_assign_user_profile_in_project ..."
      end
      # verify the required parameter 'project_id' is set
      fail ArgumentError, "Missing the required parameter 'project_id' when calling UserprofileApi.batch_assign_user_profile_in_project" if project_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling UserprofileApi.batch_assign_user_profile_in_project" if body.nil?
      # resource path
      local_var_path = "/api/v3/user-profiles/{projectId}/batch-assign-users".sub('{format}','json').sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserResourceExtension>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserprofileApi#batch_assign_user_profile_in_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets current User's Admin Profile
    # To retrieve your Admin Profile  <strong>qTest Manager version:</strong> 4+
    # @param [Hash] opts the optional parameters
    # @return [AdminProfile]
    def get_current(opts = {})
      data, _status_code, _headers = get_current_with_http_info(opts)
      return data
    end

    # Gets current User&#39;s Admin Profile
    # To retrieve your Admin Profile  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminProfile, Fixnum, Hash)>] AdminProfile data, response status code and response headers
    def get_current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserprofileApi.get_current ..."
      end
      # resource path
      local_var_path = "/api/v3/admin-profiles/current".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdminProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserprofileApi#get_current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets current User's Profiles in different Projects
    # To retrieve your User Profiles in different Projects
    # @param [Hash] opts the optional parameters
    # @return [Array<UserProfile>]
    def get_profiles_of_current_user(opts = {})
      data, _status_code, _headers = get_profiles_of_current_user_with_http_info(opts)
      return data
    end

    # Gets current User&#39;s Profiles in different Projects
    # To retrieve your User Profiles in different Projects
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserProfile>, Fixnum, Hash)>] Array<UserProfile> data, response status code and response headers
    def get_profiles_of_current_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserprofileApi.get_profiles_of_current_user ..."
      end
      # resource path
      local_var_path = "/api/v3/user-profiles/current".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserProfile>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserprofileApi#get_profiles_of_current_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets available Profiles
    # To retrieve all available profiles in your qTest Manager instance. It requires that your qTest Manager profile is a site admin with <em>View User Profiles</em> permissions  <strong>qTest Manager version:</strong> 8.4.2+
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type &lt;em&gt;type&#x3D;admin&lt;/em&gt; - to retrieve only admin profiles  &lt;em&gt;type&#x3D;use&lt;/em&gt; - to retrieve only normal user profiles  Omit this parameter to include both
    # @return [UserProfileResponse]
    def get_user_profiles(opts = {})
      data, _status_code, _headers = get_user_profiles_with_http_info(opts)
      return data
    end

    # Gets available Profiles
    # To retrieve all available profiles in your qTest Manager instance. It requires that your qTest Manager profile is a site admin with &lt;em&gt;View User Profiles&lt;/em&gt; permissions  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.4.2+
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type &lt;em&gt;type&#x3D;admin&lt;/em&gt; - to retrieve only admin profiles  &lt;em&gt;type&#x3D;use&lt;/em&gt; - to retrieve only normal user profiles  Omit this parameter to include both
    # @return [Array<(UserProfileResponse, Fixnum, Hash)>] UserProfileResponse data, response status code and response headers
    def get_user_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserprofileApi.get_user_profiles ..."
      end
      if opts[:'type'] && !['admin', 'user'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of admin, user'
      end
      # resource path
      local_var_path = "/api/v3/user-profiles".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Authorization']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserProfileResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserprofileApi#get_user_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
