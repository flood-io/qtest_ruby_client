=begin
#qTest Manager API Version 8.6 - 9.1

#qTest Manager API Version 8.6 - 9.1

OpenAPI spec version: 8.6 - 9.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class LoginApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Log in
    # To authenticate the API client against qTest Manager and acquire authorized access token.    Note: Please choose parameter <em>content-type=application/x-www-form-urlencoded</em>
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type always use &lt;em&gt;grant_type&#x3D;password&lt;/em&gt; (default to password)
    # @option opts [String] :username Your qTest Manager username
    # @option opts [String] :password Your qTest Manager password
    # @option opts [String] :authorization Basic + [base64 string of \&quot;&lt;strong&gt;your qTest site name and colon&lt;/strong&gt;\&quot;]  Example: qTest Manager site is: apitryout.qtestnet.com then site name is: apitryout + &#39;:&#39;, then Authorization is: Basic YXBpdHJ5b3V0Og&#x3D;&#x3D;
    # @return [OAuthResponse]
    def post_access_token(opts = {})
      data, _status_code, _headers = post_access_token_with_http_info(opts)
      return data
    end

    # Log in
    # To authenticate the API client against qTest Manager and acquire authorized access token.    Note: Please choose parameter &lt;em&gt;content-type&#x3D;application/x-www-form-urlencoded&lt;/em&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type always use &lt;em&gt;grant_type&#x3D;password&lt;/em&gt;
    # @option opts [String] :username Your qTest Manager username
    # @option opts [String] :password Your qTest Manager password
    # @option opts [String] :authorization Basic + [base64 string of \&quot;&lt;strong&gt;your qTest site name and colon&lt;/strong&gt;\&quot;]  Example: qTest Manager site is: apitryout.qtestnet.com then site name is: apitryout + &#39;:&#39;, then Authorization is: Basic YXBpdHJ5b3V0Og&#x3D;&#x3D;
    # @return [Array<(OAuthResponse, Fixnum, Hash)>] OAuthResponse data, response status code and response headers
    def post_access_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LoginApi.post_access_token ..."
      end
      if opts[:'grant_type'] && !['password', 'authorization_code', 'client_credentials'].include?(opts[:'grant_type'])
        fail ArgumentError, 'invalid value for "grant_type", must be one of password, authorization_code, client_credentials'
      end
      # resource path
      local_var_path = "/oauth/token".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}
      form_params["grant_type"] = opts[:'grant_type'] if !opts[:'grant_type'].nil?
      form_params["username"] = opts[:'username'] if !opts[:'username'].nil?
      form_params["password"] = opts[:'password'] if !opts[:'password'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OAuthResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoginApi#post_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
